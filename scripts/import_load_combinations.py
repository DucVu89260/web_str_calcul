# import_load_combinations.py
import sys
import csv
import re
import comtypes.client
import time

def get_sap_object():
    """K·∫øt n·ªëi t·ªõi SAP2000 qua comtypes"""
    try:
        # Th·ª≠ k·∫øt n·ªëi t·ªõi SAP2000 ƒëang ch·∫°y
        print("ƒêang th·ª≠ k·∫øt n·ªëi t·ªõi SAP2000 ƒëang ch·∫°y...")
        try:
            SapObject = comtypes.client.GetActiveObject("CSI.SAP2000.API.SapObject")
            print("‚úÖ K·∫øt n·ªëi t·ªõi instance SAP2000 ƒëang ch·∫°y.")
        except:
            print("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y instance SAP2000 ƒëang ch·∫°y. T·∫°o instance m·ªõi...")
            helper = comtypes.client.CreateObject('SAP2000v1.Helper')
            helper = helper.QueryInterface(comtypes.gen.SAP2000v1.cHelper)
            print("‚úÖ Helper object t·∫°o th√†nh c√¥ng.")
            SapObject = helper.CreateObjectProgID("CSI.SAP2000.API.SapObject")
            print("‚úÖ SapObject t·∫°o th√†nh c√¥ng.")
            SapObject.ApplicationStart(Units=6)  # 6 = kN_m_C
            print("‚úÖ SAP2000 ƒë√£ kh·ªüi ƒë·ªông.")

        # L·∫•y SapModel
        SapModel = SapObject.SapModel
        print("‚úÖ L·∫•y SapModel th√†nh c√¥ng.")

        # Kh·ªüi t·∫°o model m·ªõi n·∫øu c·∫ßn
        ret = SapModel.InitializeNewModel()
        if ret != 0:
            raise RuntimeError(f"‚ùå Kh√¥ng th·ªÉ kh·ªüi t·∫°o model m·ªõi (ret={ret})")

        # Ki·ªÉm tra model locked
        is_locked = SapModel.GetModelIsLocked()
        if is_locked:
            print("‚ö†Ô∏è Model ƒëang b·ªã kh√≥a. H√£y m·ªü file m·ªõi th·ªß c√¥ng.")
            sys.exit(1)
        print("‚úÖ Model kh√¥ng b·ªã kh√≥a.")

        print("‚úÖ K·∫øt n·ªëi t·ªõi SAP2000 v√† kh·ªüi t·∫°o model th√†nh c√¥ng.")
        return SapObject, SapModel
    except Exception as e:
        raise RuntimeError(f"‚ùå L·ªói khi k·∫øt n·ªëi t·ªõi SAP2000: {str(e)}\nTip: ƒê·∫£m b·∫£o SAP2000 v22 ƒë√£ m·ªü v·ªõi quy·ªÅn admin v√† blank model s·∫µn s√†ng.")

def parse_part(part):
    """T√°ch h·ªá s·ªë v√† load case t·ª´ chu·ªói nh∆∞ '1.2DL1' ho·∫∑c '1.0WX1+,WX2-'"""
    match = re.match(r'([0-9\.]+)(.+)', part.strip())
    if not match:
        raise ValueError(f"‚ö†Ô∏è Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c ph·∫ßn '{part}'")
    coef = float(match.group(1))
    cases_str = match.group(2)
    cases = [c.strip() for c in cases_str.split(',') if c.strip()]
    return coef, cases

def ensure_load_cases(SapModel, load_cases):
    """ƒê·∫£m b·∫£o c√°c load case t·ªìn t·∫°i (t·∫°o n·∫øu ch∆∞a c√≥)"""
    for case in load_cases:
        # Ki·ªÉm tra n·∫øu case t·ªìn t·∫°i
        ret, _, names = SapModel.LoadCases.GetNameList()
        if ret == 0 and case in names:
            print(f"‚úÖ Load case '{case}' ƒë√£ t·ªìn t·∫°i.")
            continue
        
        # T·∫°o m·ªõi StaticLinear case
        ret = SapModel.LoadCases.StaticLinear.SetCase(case)
        if ret != 0:
            print(f"‚ö†Ô∏è L·ªói t·∫°o load case '{case}' (ret={ret}). Ki·ªÉm tra t√™n h·ª£p l·ªá.")
        else:
            print(f"‚úÖ ƒê√£ t·∫°o load case '{case}'.")

def import_combinations(csv_file, save_path=None):
    SapObject, SapModel = get_sap_object()

    # Thu th·∫≠p t·∫•t c·∫£ load case t·ª´ file CSV
    all_load_cases = set()
    combo_formulas = {}
    with open(csv_file, newline='', encoding='utf-8') as f:
        reader = csv.DictReader(f)
        for row in reader:
            combo_name = f"LC{row['No']}".strip()
            formula = row['Combination'].strip()
            combo_formulas[combo_name] = formula
            parts = formula.split('+')
            for part in parts:
                if not part.strip():
                    continue
                try:
                    _, cases = parse_part(part)
                    all_load_cases.update(cases)
                except ValueError as e:
                    print(e)
                    continue

    # ƒê·∫£m b·∫£o t·∫•t c·∫£ load case t·ªìn t·∫°i
    ensure_load_cases(SapModel, all_load_cases)
    print(f"‚úÖ ƒê√£ ki·ªÉm tra/t·∫°o c√°c load case: {', '.join(sorted(all_load_cases))}")

    # Ki·ªÉm tra t·ªï h·ª£p tr√πng l·∫∑p
    seen_formulas = {}
    for combo_name, formula in combo_formulas.items():
        if formula in seen_formulas:
            print(f"‚ö†Ô∏è T·ªï h·ª£p {combo_name} tr√πng v·ªõi {seen_formulas[formula]}: {formula}")
        else:
            seen_formulas[formula] = combo_name

    # T·∫°o t·ªï h·ª£p t·∫£i
    for combo_name, formula in combo_formulas.items():
        parts = formula.split('+')
        load_cases = []
        factors = []

        for part in parts:
            if not part.strip():
                continue
            try:
                coef, cases = parse_part(part)
                for case in cases:
                    load_cases.append(case)
                    factors.append(coef)
            except ValueError as e:
                print(e)
                continue

        # T·∫°o combo tuy·∫øn t√≠nh (0 = Linear Add)
        ret = SapModel.LoadCases.LoadCombo.Add(combo_name, 0)
        if ret != 0:
            print(f"‚ö†Ô∏è L·ªói khi t·∫°o combo {combo_name} (ret={ret})")
            continue

        # G√°n t·ª´ng load case v√†o combo
        for case, factor in zip(load_cases, factors):
            ret2 = SapModel.LoadCases.LoadCombo.SetCaseList(combo_name, 0, case, factor)
            if ret2 != 0:
                print(f"‚ö†Ô∏è L·ªói khi th√™m case '{case}' v·ªõi h·ªá s·ªë {factor} v√†o combo {combo_name} (ret={ret2})")

        print(f"‚úÖ Added {combo_name}: {formula}")

    # L∆∞u model n·∫øu c√≥ ƒë∆∞·ªùng d·∫´n
    if save_path:
        ret = SapModel.File.Save(save_path)
        if ret == 0:
            print(f"üíæ Saved model with load combos at: {save_path}")
        else:
            print(f"‚ö†Ô∏è L·ªói l∆∞u model (ret={ret})")

    # ƒê√≥ng k·∫øt n·ªëi an to√†n
    SapObject.ApplicationExit(False)  # False = kh√¥ng l∆∞u khi tho√°t
    print("‚úÖ ƒê√£ ƒë√≥ng k·∫øt n·ªëi SAP2000.")

if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("Usage: python import_load_combinations.py path_to_csv [save_path]")
    else:
        csv_file = sys.argv[1]
        save_path = sys.argv[2] if len(sys.argv) > 2 else None
        import_combinations(csv_file, save_path)